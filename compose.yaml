services:
  traefik:
    image: "traefik:v3"
    container_name: "traefik"
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - web

  postgresdb:
    image: postgres:17
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "${POSTGRES_DB}",
          "-U",
          "${POSTGRES_USER}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal

  falak:
    build:
      context: ./falak
      dockerfile: "Dockerfile"
    env_file: ./falak/falak.env
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: postgresdb
      DB_PORT: ${POSTGRES_PORT}
      DB_NAME: ${POSTGRES_DB}
      DB_SSL_MODE: disable
      PORT: ${FALAK_PORT}
    depends_on:
      postgresdb:
        condition: service_healthy
      loki:
        condition: service_started
    networks:
      - web
      - internal

  website:
    build:
      context: ./website
      dockerfile: Dockerfile
    networks:
      - web

  grafana:
    image: grafana/grafana:latest
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    networks:
      - web
      - internal
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      loki:
        condition: service_started

  loki:
    image: grafana/loki:3.3.2
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - internal
    volumes:
      - loki-storage:/loki

  baikal:
    image: ckulka/baikal:nginx
    networks:
      - web
    volumes:
      - baikal-config:/var/www/baikal/config
      - baikal-data:/var/www/baikal/Specific

  wasapp:
    build:
      context: ./wasapp
      dockerfile: Dockerfile
    env_file: ./wasapp/.env
    networks:
      - internal
    volumes:
      - wasapp-wwebjs_auth:/app/.wwebjs_auth
    # so it has time to shutdown all whatsapp stuff, so no data is corrupt
    stop_grace_period: 60s

volumes:
  postgres_data:
  grafana-storage:
  loki-storage:
  baikal-config:
  baikal-data:
  mongodb-data:
  wasapp-wwebjs_auth:

networks:
  web:
  internal:
