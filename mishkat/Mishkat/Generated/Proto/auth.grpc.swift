//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Auth_AuthClient`, then call methods of this protocol to make API calls.
internal protocol Auth_AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func initiateEmail(
    _ request: Auth_InitiateEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse>

  func completeEmail(
    _ request: Auth_CompleteEmailRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse>

  func useGoogle(
    _ request: Auth_UseGoogleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_UseGoogleRequest, Auth_UseGoogleResponse>
}

extension Auth_AuthClientProtocol {
  internal var serviceName: String {
    return "auth.Auth"
  }

  /// Unary call to InitiateEmail
  ///
  /// - Parameters:
  ///   - request: Request to send to InitiateEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func initiateEmail(
    _ request: Auth_InitiateEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.initiateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateEmailInterceptors() ?? []
    )
  }

  /// Unary call to CompleteEmail
  ///
  /// - Parameters:
  ///   - request: Request to send to CompleteEmail.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func completeEmail(
    _ request: Auth_CompleteEmailRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.completeEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompleteEmailInterceptors() ?? []
    )
  }

  /// Unary call to UseGoogle
  ///
  /// - Parameters:
  ///   - request: Request to send to UseGoogle.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func useGoogle(
    _ request: Auth_UseGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_UseGoogleRequest, Auth_UseGoogleResponse> {
    return self.makeUnaryCall(
      path: Auth_AuthClientMetadata.Methods.useGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUseGoogleInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Auth_AuthClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Auth_AuthNIOClient")
internal final class Auth_AuthClient: Auth_AuthClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Auth_AuthClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Auth_AuthNIOClient: Auth_AuthClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the auth.Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auth_AuthAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthClientInterceptorFactoryProtocol? { get }

  func makeInitiateEmailCall(
    _ request: Auth_InitiateEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse>

  func makeCompleteEmailCall(
    _ request: Auth_CompleteEmailRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse>

  func makeUseGoogleCall(
    _ request: Auth_UseGoogleRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Auth_UseGoogleRequest, Auth_UseGoogleResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthClientMetadata.serviceDescriptor
  }

  internal var interceptors: Auth_AuthClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeInitiateEmailCall(
    _ request: Auth_InitiateEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.initiateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateEmailInterceptors() ?? []
    )
  }

  internal func makeCompleteEmailCall(
    _ request: Auth_CompleteEmailRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.completeEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompleteEmailInterceptors() ?? []
    )
  }

  internal func makeUseGoogleCall(
    _ request: Auth_UseGoogleRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Auth_UseGoogleRequest, Auth_UseGoogleResponse> {
    return self.makeAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.useGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUseGoogleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncClientProtocol {
  internal func initiateEmail(
    _ request: Auth_InitiateEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_InitiateEmailResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.initiateEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInitiateEmailInterceptors() ?? []
    )
  }

  internal func completeEmail(
    _ request: Auth_CompleteEmailRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_CompleteEmailResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.completeEmail.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCompleteEmailInterceptors() ?? []
    )
  }

  internal func useGoogle(
    _ request: Auth_UseGoogleRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Auth_UseGoogleResponse {
    return try await self.performAsyncUnaryCall(
      path: Auth_AuthClientMetadata.Methods.useGoogle.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUseGoogleInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Auth_AuthAsyncClient: Auth_AuthAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Auth_AuthClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Auth_AuthClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'initiateEmail'.
  func makeInitiateEmailInterceptors() -> [ClientInterceptor<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse>]

  /// - Returns: Interceptors to use when invoking 'completeEmail'.
  func makeCompleteEmailInterceptors() -> [ClientInterceptor<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse>]

  /// - Returns: Interceptors to use when invoking 'useGoogle'.
  func makeUseGoogleInterceptors() -> [ClientInterceptor<Auth_UseGoogleRequest, Auth_UseGoogleResponse>]
}

internal enum Auth_AuthClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthClientMetadata.Methods.initiateEmail,
      Auth_AuthClientMetadata.Methods.completeEmail,
      Auth_AuthClientMetadata.Methods.useGoogle,
    ]
  )

  internal enum Methods {
    internal static let initiateEmail = GRPCMethodDescriptor(
      name: "InitiateEmail",
      path: "/auth.Auth/InitiateEmail",
      type: GRPCCallType.unary
    )

    internal static let completeEmail = GRPCMethodDescriptor(
      name: "CompleteEmail",
      path: "/auth.Auth/CompleteEmail",
      type: GRPCCallType.unary
    )

    internal static let useGoogle = GRPCMethodDescriptor(
      name: "UseGoogle",
      path: "/auth.Auth/UseGoogle",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Auth_AuthProvider: CallHandlerProvider {
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func initiateEmail(request: Auth_InitiateEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_InitiateEmailResponse>

  func completeEmail(request: Auth_CompleteEmailRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_CompleteEmailResponse>

  func useGoogle(request: Auth_UseGoogleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Auth_UseGoogleResponse>
}

extension Auth_AuthProvider {
  internal var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitiateEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_InitiateEmailRequest>(),
        responseSerializer: ProtobufSerializer<Auth_InitiateEmailResponse>(),
        interceptors: self.interceptors?.makeInitiateEmailInterceptors() ?? [],
        userFunction: self.initiateEmail(request:context:)
      )

    case "CompleteEmail":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_CompleteEmailRequest>(),
        responseSerializer: ProtobufSerializer<Auth_CompleteEmailResponse>(),
        interceptors: self.interceptors?.makeCompleteEmailInterceptors() ?? [],
        userFunction: self.completeEmail(request:context:)
      )

    case "UseGoogle":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_UseGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Auth_UseGoogleResponse>(),
        interceptors: self.interceptors?.makeUseGoogleInterceptors() ?? [],
        userFunction: self.useGoogle(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Auth_AuthAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Auth_AuthServerInterceptorFactoryProtocol? { get }

  func initiateEmail(
    request: Auth_InitiateEmailRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_InitiateEmailResponse

  func completeEmail(
    request: Auth_CompleteEmailRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_CompleteEmailResponse

  func useGoogle(
    request: Auth_UseGoogleRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Auth_UseGoogleResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Auth_AuthAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Auth_AuthServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Auth_AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Auth_AuthServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "InitiateEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_InitiateEmailRequest>(),
        responseSerializer: ProtobufSerializer<Auth_InitiateEmailResponse>(),
        interceptors: self.interceptors?.makeInitiateEmailInterceptors() ?? [],
        wrapping: { try await self.initiateEmail(request: $0, context: $1) }
      )

    case "CompleteEmail":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_CompleteEmailRequest>(),
        responseSerializer: ProtobufSerializer<Auth_CompleteEmailResponse>(),
        interceptors: self.interceptors?.makeCompleteEmailInterceptors() ?? [],
        wrapping: { try await self.completeEmail(request: $0, context: $1) }
      )

    case "UseGoogle":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Auth_UseGoogleRequest>(),
        responseSerializer: ProtobufSerializer<Auth_UseGoogleResponse>(),
        interceptors: self.interceptors?.makeUseGoogleInterceptors() ?? [],
        wrapping: { try await self.useGoogle(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Auth_AuthServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'initiateEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInitiateEmailInterceptors() -> [ServerInterceptor<Auth_InitiateEmailRequest, Auth_InitiateEmailResponse>]

  /// - Returns: Interceptors to use when handling 'completeEmail'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCompleteEmailInterceptors() -> [ServerInterceptor<Auth_CompleteEmailRequest, Auth_CompleteEmailResponse>]

  /// - Returns: Interceptors to use when handling 'useGoogle'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUseGoogleInterceptors() -> [ServerInterceptor<Auth_UseGoogleRequest, Auth_UseGoogleResponse>]
}

internal enum Auth_AuthServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "auth.Auth",
    methods: [
      Auth_AuthServerMetadata.Methods.initiateEmail,
      Auth_AuthServerMetadata.Methods.completeEmail,
      Auth_AuthServerMetadata.Methods.useGoogle,
    ]
  )

  internal enum Methods {
    internal static let initiateEmail = GRPCMethodDescriptor(
      name: "InitiateEmail",
      path: "/auth.Auth/InitiateEmail",
      type: GRPCCallType.unary
    )

    internal static let completeEmail = GRPCMethodDescriptor(
      name: "CompleteEmail",
      path: "/auth.Auth/CompleteEmail",
      type: GRPCCallType.unary
    )

    internal static let useGoogle = GRPCMethodDescriptor(
      name: "UseGoogle",
      path: "/auth.Auth/UseGoogle",
      type: GRPCCallType.unary
    )
  }
}
