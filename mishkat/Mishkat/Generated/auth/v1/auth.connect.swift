// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: auth/v1/auth.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Auth_V1_AuthServiceClientInterface: Sendable {

    @discardableResult
    func `initiateEmail`(request: Auth_V1_InitiateEmailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_InitiateEmailResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `initiateEmail`(request: Auth_V1_InitiateEmailRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_InitiateEmailResponse>

    @discardableResult
    func `completeEmail`(request: Auth_V1_CompleteEmailRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_CompleteEmailResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `completeEmail`(request: Auth_V1_CompleteEmailRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_CompleteEmailResponse>

    @discardableResult
    func `useGoogle`(request: Auth_V1_UseGoogleRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_UseGoogleResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `useGoogle`(request: Auth_V1_UseGoogleRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_UseGoogleResponse>

    @discardableResult
    func `generateMagicToken`(request: Auth_V1_GenerateMagicTokenRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_GenerateMagicTokenResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `generateMagicToken`(request: Auth_V1_GenerateMagicTokenRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_GenerateMagicTokenResponse>

    @discardableResult
    func `refreshTokens`(request: Auth_V1_RefreshTokensRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Auth_V1_RefreshTokensResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `refreshTokens`(request: Auth_V1_RefreshTokensRequest, headers: Connect.Headers) async -> ResponseMessage<Auth_V1_RefreshTokensResponse>
}

/// Concrete implementation of `Auth_V1_AuthServiceClientInterface`.
public final class Auth_V1_AuthServiceClient: Auth_V1_AuthServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `initiateEmail`(request: Auth_V1_InitiateEmailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_InitiateEmailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/InitiateEmail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `initiateEmail`(request: Auth_V1_InitiateEmailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_InitiateEmailResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/InitiateEmail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `completeEmail`(request: Auth_V1_CompleteEmailRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_CompleteEmailResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/CompleteEmail", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `completeEmail`(request: Auth_V1_CompleteEmailRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_CompleteEmailResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/CompleteEmail", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `useGoogle`(request: Auth_V1_UseGoogleRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_UseGoogleResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/UseGoogle", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `useGoogle`(request: Auth_V1_UseGoogleRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_UseGoogleResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/UseGoogle", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `generateMagicToken`(request: Auth_V1_GenerateMagicTokenRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_GenerateMagicTokenResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/GenerateMagicToken", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `generateMagicToken`(request: Auth_V1_GenerateMagicTokenRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_GenerateMagicTokenResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/GenerateMagicToken", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @discardableResult
    public func `refreshTokens`(request: Auth_V1_RefreshTokensRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Auth_V1_RefreshTokensResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/auth.v1.AuthService/RefreshTokens", idempotencyLevel: .unknown, request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `refreshTokens`(request: Auth_V1_RefreshTokensRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Auth_V1_RefreshTokensResponse> {
        return await self.client.unary(path: "/auth.v1.AuthService/RefreshTokens", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let initiateEmail = Connect.MethodSpec(name: "InitiateEmail", service: "auth.v1.AuthService", type: .unary)
            public static let completeEmail = Connect.MethodSpec(name: "CompleteEmail", service: "auth.v1.AuthService", type: .unary)
            public static let useGoogle = Connect.MethodSpec(name: "UseGoogle", service: "auth.v1.AuthService", type: .unary)
            public static let generateMagicToken = Connect.MethodSpec(name: "GenerateMagicToken", service: "auth.v1.AuthService", type: .unary)
            public static let refreshTokens = Connect.MethodSpec(name: "RefreshTokens", service: "auth.v1.AuthService", type: .unary)
        }
    }
}
