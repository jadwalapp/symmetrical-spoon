// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calendar/v1/calendar.proto

package calendarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jadwalapp/symmetrical-spoon/falak/pkg/gen/proto/calendar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalendarServiceName is the fully-qualified name of the CalendarService service.
	CalendarServiceName = "calendar.v1.CalendarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalendarServiceGetCalDavAccountProcedure is the fully-qualified name of the CalendarService's
	// GetCalDavAccount RPC.
	CalendarServiceGetCalDavAccountProcedure = "/calendar.v1.CalendarService/GetCalDavAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	calendarServiceServiceDescriptor                = v1.File_calendar_v1_calendar_proto.Services().ByName("CalendarService")
	calendarServiceGetCalDavAccountMethodDescriptor = calendarServiceServiceDescriptor.Methods().ByName("GetCalDavAccount")
)

// CalendarServiceClient is a client for the calendar.v1.CalendarService service.
type CalendarServiceClient interface {
	GetCalDavAccount(context.Context, *connect.Request[v1.GetCalDavAccountRequest]) (*connect.Response[v1.GetCalDavAccountResponse], error)
}

// NewCalendarServiceClient constructs a client for the calendar.v1.CalendarService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalendarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalendarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calendarServiceClient{
		getCalDavAccount: connect.NewClient[v1.GetCalDavAccountRequest, v1.GetCalDavAccountResponse](
			httpClient,
			baseURL+CalendarServiceGetCalDavAccountProcedure,
			connect.WithSchema(calendarServiceGetCalDavAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// calendarServiceClient implements CalendarServiceClient.
type calendarServiceClient struct {
	getCalDavAccount *connect.Client[v1.GetCalDavAccountRequest, v1.GetCalDavAccountResponse]
}

// GetCalDavAccount calls calendar.v1.CalendarService.GetCalDavAccount.
func (c *calendarServiceClient) GetCalDavAccount(ctx context.Context, req *connect.Request[v1.GetCalDavAccountRequest]) (*connect.Response[v1.GetCalDavAccountResponse], error) {
	return c.getCalDavAccount.CallUnary(ctx, req)
}

// CalendarServiceHandler is an implementation of the calendar.v1.CalendarService service.
type CalendarServiceHandler interface {
	GetCalDavAccount(context.Context, *connect.Request[v1.GetCalDavAccountRequest]) (*connect.Response[v1.GetCalDavAccountResponse], error)
}

// NewCalendarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalendarServiceHandler(svc CalendarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calendarServiceGetCalDavAccountHandler := connect.NewUnaryHandler(
		CalendarServiceGetCalDavAccountProcedure,
		svc.GetCalDavAccount,
		connect.WithSchema(calendarServiceGetCalDavAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/calendar.v1.CalendarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalendarServiceGetCalDavAccountProcedure:
			calendarServiceGetCalDavAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalendarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalendarServiceHandler struct{}

func (UnimplementedCalendarServiceHandler) GetCalDavAccount(context.Context, *connect.Request[v1.GetCalDavAccountRequest]) (*connect.Response[v1.GetCalDavAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.GetCalDavAccount is not implemented"))
}
