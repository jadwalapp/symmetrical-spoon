// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: calendar/v1/calendar.proto

package calendarv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jadwalapp/symmetrical-spoon/falak/pkg/gen/proto/calendar/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CalendarServiceName is the fully-qualified name of the CalendarService service.
	CalendarServiceName = "calendar.v1.CalendarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CalendarServiceCreateCalendarProcedure is the fully-qualified name of the CalendarService's
	// CreateCalendar RPC.
	CalendarServiceCreateCalendarProcedure = "/calendar.v1.CalendarService/CreateCalendar"
	// CalendarServiceGetCalendarsProcedure is the fully-qualified name of the CalendarService's
	// GetCalendars RPC.
	CalendarServiceGetCalendarsProcedure = "/calendar.v1.CalendarService/GetCalendars"
	// CalendarServiceCreateEventProcedure is the fully-qualified name of the CalendarService's
	// CreateEvent RPC.
	CalendarServiceCreateEventProcedure = "/calendar.v1.CalendarService/CreateEvent"
	// CalendarServiceUpdateEventProcedure is the fully-qualified name of the CalendarService's
	// UpdateEvent RPC.
	CalendarServiceUpdateEventProcedure = "/calendar.v1.CalendarService/UpdateEvent"
	// CalendarServiceDeleteEventProcedure is the fully-qualified name of the CalendarService's
	// DeleteEvent RPC.
	CalendarServiceDeleteEventProcedure = "/calendar.v1.CalendarService/DeleteEvent"
	// CalendarServiceGetEventsByCalendarProcedure is the fully-qualified name of the CalendarService's
	// GetEventsByCalendar RPC.
	CalendarServiceGetEventsByCalendarProcedure = "/calendar.v1.CalendarService/GetEventsByCalendar"
	// CalendarServiceConnectCalDAVCalendarProcedure is the fully-qualified name of the
	// CalendarService's ConnectCalDAVCalendar RPC.
	CalendarServiceConnectCalDAVCalendarProcedure = "/calendar.v1.CalendarService/ConnectCalDAVCalendar"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	calendarServiceServiceDescriptor                     = v1.File_calendar_v1_calendar_proto.Services().ByName("CalendarService")
	calendarServiceCreateCalendarMethodDescriptor        = calendarServiceServiceDescriptor.Methods().ByName("CreateCalendar")
	calendarServiceGetCalendarsMethodDescriptor          = calendarServiceServiceDescriptor.Methods().ByName("GetCalendars")
	calendarServiceCreateEventMethodDescriptor           = calendarServiceServiceDescriptor.Methods().ByName("CreateEvent")
	calendarServiceUpdateEventMethodDescriptor           = calendarServiceServiceDescriptor.Methods().ByName("UpdateEvent")
	calendarServiceDeleteEventMethodDescriptor           = calendarServiceServiceDescriptor.Methods().ByName("DeleteEvent")
	calendarServiceGetEventsByCalendarMethodDescriptor   = calendarServiceServiceDescriptor.Methods().ByName("GetEventsByCalendar")
	calendarServiceConnectCalDAVCalendarMethodDescriptor = calendarServiceServiceDescriptor.Methods().ByName("ConnectCalDAVCalendar")
)

// CalendarServiceClient is a client for the calendar.v1.CalendarService service.
type CalendarServiceClient interface {
	CreateCalendar(context.Context, *connect.Request[v1.CreateCalendarRequest]) (*connect.Response[v1.CreateCalendarResponse], error)
	GetCalendars(context.Context, *connect.Request[v1.GetCalendarsRequest]) (*connect.Response[v1.GetCalendarsResponse], error)
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	GetEventsByCalendar(context.Context, *connect.Request[v1.GetEventsByCalendarRequest]) (*connect.Response[v1.GetEventsByCalendarResponse], error)
	ConnectCalDAVCalendar(context.Context, *connect.Request[v1.ConnectCalDAVCalendarRequest]) (*connect.Response[v1.ConnectCalDAVCalendarResponse], error)
}

// NewCalendarServiceClient constructs a client for the calendar.v1.CalendarService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCalendarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CalendarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &calendarServiceClient{
		createCalendar: connect.NewClient[v1.CreateCalendarRequest, v1.CreateCalendarResponse](
			httpClient,
			baseURL+CalendarServiceCreateCalendarProcedure,
			connect.WithSchema(calendarServiceCreateCalendarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCalendars: connect.NewClient[v1.GetCalendarsRequest, v1.GetCalendarsResponse](
			httpClient,
			baseURL+CalendarServiceGetCalendarsProcedure,
			connect.WithSchema(calendarServiceGetCalendarsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createEvent: connect.NewClient[v1.CreateEventRequest, v1.CreateEventResponse](
			httpClient,
			baseURL+CalendarServiceCreateEventProcedure,
			connect.WithSchema(calendarServiceCreateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateEvent: connect.NewClient[v1.UpdateEventRequest, v1.UpdateEventResponse](
			httpClient,
			baseURL+CalendarServiceUpdateEventProcedure,
			connect.WithSchema(calendarServiceUpdateEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteEvent: connect.NewClient[v1.DeleteEventRequest, v1.DeleteEventResponse](
			httpClient,
			baseURL+CalendarServiceDeleteEventProcedure,
			connect.WithSchema(calendarServiceDeleteEventMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEventsByCalendar: connect.NewClient[v1.GetEventsByCalendarRequest, v1.GetEventsByCalendarResponse](
			httpClient,
			baseURL+CalendarServiceGetEventsByCalendarProcedure,
			connect.WithSchema(calendarServiceGetEventsByCalendarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connectCalDAVCalendar: connect.NewClient[v1.ConnectCalDAVCalendarRequest, v1.ConnectCalDAVCalendarResponse](
			httpClient,
			baseURL+CalendarServiceConnectCalDAVCalendarProcedure,
			connect.WithSchema(calendarServiceConnectCalDAVCalendarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// calendarServiceClient implements CalendarServiceClient.
type calendarServiceClient struct {
	createCalendar        *connect.Client[v1.CreateCalendarRequest, v1.CreateCalendarResponse]
	getCalendars          *connect.Client[v1.GetCalendarsRequest, v1.GetCalendarsResponse]
	createEvent           *connect.Client[v1.CreateEventRequest, v1.CreateEventResponse]
	updateEvent           *connect.Client[v1.UpdateEventRequest, v1.UpdateEventResponse]
	deleteEvent           *connect.Client[v1.DeleteEventRequest, v1.DeleteEventResponse]
	getEventsByCalendar   *connect.Client[v1.GetEventsByCalendarRequest, v1.GetEventsByCalendarResponse]
	connectCalDAVCalendar *connect.Client[v1.ConnectCalDAVCalendarRequest, v1.ConnectCalDAVCalendarResponse]
}

// CreateCalendar calls calendar.v1.CalendarService.CreateCalendar.
func (c *calendarServiceClient) CreateCalendar(ctx context.Context, req *connect.Request[v1.CreateCalendarRequest]) (*connect.Response[v1.CreateCalendarResponse], error) {
	return c.createCalendar.CallUnary(ctx, req)
}

// GetCalendars calls calendar.v1.CalendarService.GetCalendars.
func (c *calendarServiceClient) GetCalendars(ctx context.Context, req *connect.Request[v1.GetCalendarsRequest]) (*connect.Response[v1.GetCalendarsResponse], error) {
	return c.getCalendars.CallUnary(ctx, req)
}

// CreateEvent calls calendar.v1.CalendarService.CreateEvent.
func (c *calendarServiceClient) CreateEvent(ctx context.Context, req *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return c.createEvent.CallUnary(ctx, req)
}

// UpdateEvent calls calendar.v1.CalendarService.UpdateEvent.
func (c *calendarServiceClient) UpdateEvent(ctx context.Context, req *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return c.updateEvent.CallUnary(ctx, req)
}

// DeleteEvent calls calendar.v1.CalendarService.DeleteEvent.
func (c *calendarServiceClient) DeleteEvent(ctx context.Context, req *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return c.deleteEvent.CallUnary(ctx, req)
}

// GetEventsByCalendar calls calendar.v1.CalendarService.GetEventsByCalendar.
func (c *calendarServiceClient) GetEventsByCalendar(ctx context.Context, req *connect.Request[v1.GetEventsByCalendarRequest]) (*connect.Response[v1.GetEventsByCalendarResponse], error) {
	return c.getEventsByCalendar.CallUnary(ctx, req)
}

// ConnectCalDAVCalendar calls calendar.v1.CalendarService.ConnectCalDAVCalendar.
func (c *calendarServiceClient) ConnectCalDAVCalendar(ctx context.Context, req *connect.Request[v1.ConnectCalDAVCalendarRequest]) (*connect.Response[v1.ConnectCalDAVCalendarResponse], error) {
	return c.connectCalDAVCalendar.CallUnary(ctx, req)
}

// CalendarServiceHandler is an implementation of the calendar.v1.CalendarService service.
type CalendarServiceHandler interface {
	CreateCalendar(context.Context, *connect.Request[v1.CreateCalendarRequest]) (*connect.Response[v1.CreateCalendarResponse], error)
	GetCalendars(context.Context, *connect.Request[v1.GetCalendarsRequest]) (*connect.Response[v1.GetCalendarsResponse], error)
	CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error)
	UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error)
	DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error)
	GetEventsByCalendar(context.Context, *connect.Request[v1.GetEventsByCalendarRequest]) (*connect.Response[v1.GetEventsByCalendarResponse], error)
	ConnectCalDAVCalendar(context.Context, *connect.Request[v1.ConnectCalDAVCalendarRequest]) (*connect.Response[v1.ConnectCalDAVCalendarResponse], error)
}

// NewCalendarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCalendarServiceHandler(svc CalendarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	calendarServiceCreateCalendarHandler := connect.NewUnaryHandler(
		CalendarServiceCreateCalendarProcedure,
		svc.CreateCalendar,
		connect.WithSchema(calendarServiceCreateCalendarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceGetCalendarsHandler := connect.NewUnaryHandler(
		CalendarServiceGetCalendarsProcedure,
		svc.GetCalendars,
		connect.WithSchema(calendarServiceGetCalendarsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceCreateEventHandler := connect.NewUnaryHandler(
		CalendarServiceCreateEventProcedure,
		svc.CreateEvent,
		connect.WithSchema(calendarServiceCreateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceUpdateEventHandler := connect.NewUnaryHandler(
		CalendarServiceUpdateEventProcedure,
		svc.UpdateEvent,
		connect.WithSchema(calendarServiceUpdateEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceDeleteEventHandler := connect.NewUnaryHandler(
		CalendarServiceDeleteEventProcedure,
		svc.DeleteEvent,
		connect.WithSchema(calendarServiceDeleteEventMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceGetEventsByCalendarHandler := connect.NewUnaryHandler(
		CalendarServiceGetEventsByCalendarProcedure,
		svc.GetEventsByCalendar,
		connect.WithSchema(calendarServiceGetEventsByCalendarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	calendarServiceConnectCalDAVCalendarHandler := connect.NewUnaryHandler(
		CalendarServiceConnectCalDAVCalendarProcedure,
		svc.ConnectCalDAVCalendar,
		connect.WithSchema(calendarServiceConnectCalDAVCalendarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/calendar.v1.CalendarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CalendarServiceCreateCalendarProcedure:
			calendarServiceCreateCalendarHandler.ServeHTTP(w, r)
		case CalendarServiceGetCalendarsProcedure:
			calendarServiceGetCalendarsHandler.ServeHTTP(w, r)
		case CalendarServiceCreateEventProcedure:
			calendarServiceCreateEventHandler.ServeHTTP(w, r)
		case CalendarServiceUpdateEventProcedure:
			calendarServiceUpdateEventHandler.ServeHTTP(w, r)
		case CalendarServiceDeleteEventProcedure:
			calendarServiceDeleteEventHandler.ServeHTTP(w, r)
		case CalendarServiceGetEventsByCalendarProcedure:
			calendarServiceGetEventsByCalendarHandler.ServeHTTP(w, r)
		case CalendarServiceConnectCalDAVCalendarProcedure:
			calendarServiceConnectCalDAVCalendarHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCalendarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCalendarServiceHandler struct{}

func (UnimplementedCalendarServiceHandler) CreateCalendar(context.Context, *connect.Request[v1.CreateCalendarRequest]) (*connect.Response[v1.CreateCalendarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.CreateCalendar is not implemented"))
}

func (UnimplementedCalendarServiceHandler) GetCalendars(context.Context, *connect.Request[v1.GetCalendarsRequest]) (*connect.Response[v1.GetCalendarsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.GetCalendars is not implemented"))
}

func (UnimplementedCalendarServiceHandler) CreateEvent(context.Context, *connect.Request[v1.CreateEventRequest]) (*connect.Response[v1.CreateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.CreateEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) UpdateEvent(context.Context, *connect.Request[v1.UpdateEventRequest]) (*connect.Response[v1.UpdateEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.UpdateEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) DeleteEvent(context.Context, *connect.Request[v1.DeleteEventRequest]) (*connect.Response[v1.DeleteEventResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.DeleteEvent is not implemented"))
}

func (UnimplementedCalendarServiceHandler) GetEventsByCalendar(context.Context, *connect.Request[v1.GetEventsByCalendarRequest]) (*connect.Response[v1.GetEventsByCalendarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.GetEventsByCalendar is not implemented"))
}

func (UnimplementedCalendarServiceHandler) ConnectCalDAVCalendar(context.Context, *connect.Request[v1.ConnectCalDAVCalendarRequest]) (*connect.Response[v1.ConnectCalDAVCalendarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("calendar.v1.CalendarService.ConnectCalDAVCalendar is not implemented"))
}
