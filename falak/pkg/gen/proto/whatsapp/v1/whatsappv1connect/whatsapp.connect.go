// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: whatsapp/v1/whatsapp.proto

package whatsappv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jadwalapp/symmetrical-spoon/falak/pkg/gen/proto/whatsapp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WhatsappServiceName is the fully-qualified name of the WhatsappService service.
	WhatsappServiceName = "whatsapp.v1.WhatsappService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WhatsappServiceConnectWhatsappAccountProcedure is the fully-qualified name of the
	// WhatsappService's ConnectWhatsappAccount RPC.
	WhatsappServiceConnectWhatsappAccountProcedure = "/whatsapp.v1.WhatsappService/ConnectWhatsappAccount"
	// WhatsappServiceDisconnectWhatsappAccountProcedure is the fully-qualified name of the
	// WhatsappService's DisconnectWhatsappAccount RPC.
	WhatsappServiceDisconnectWhatsappAccountProcedure = "/whatsapp.v1.WhatsappService/DisconnectWhatsappAccount"
	// WhatsappServiceGetWhatsappAccountProcedure is the fully-qualified name of the WhatsappService's
	// GetWhatsappAccount RPC.
	WhatsappServiceGetWhatsappAccountProcedure = "/whatsapp.v1.WhatsappService/GetWhatsappAccount"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	whatsappServiceServiceDescriptor                         = v1.File_whatsapp_v1_whatsapp_proto.Services().ByName("WhatsappService")
	whatsappServiceConnectWhatsappAccountMethodDescriptor    = whatsappServiceServiceDescriptor.Methods().ByName("ConnectWhatsappAccount")
	whatsappServiceDisconnectWhatsappAccountMethodDescriptor = whatsappServiceServiceDescriptor.Methods().ByName("DisconnectWhatsappAccount")
	whatsappServiceGetWhatsappAccountMethodDescriptor        = whatsappServiceServiceDescriptor.Methods().ByName("GetWhatsappAccount")
)

// WhatsappServiceClient is a client for the whatsapp.v1.WhatsappService service.
type WhatsappServiceClient interface {
	ConnectWhatsappAccount(context.Context, *connect.Request[v1.ConnectWhatsappAccountRequest]) (*connect.Response[v1.ConnectWhatsappAccountResponse], error)
	// possible errors:
	//   - not found
	DisconnectWhatsappAccount(context.Context, *connect.Request[v1.DisconnectWhatsappAccountRequest]) (*connect.Response[v1.DisconnectWhatsappAccountResponse], error)
	// possible errors:
	//   - not found
	GetWhatsappAccount(context.Context, *connect.Request[v1.GetWhatsappAccountRequest]) (*connect.Response[v1.GetWhatsappAccountResponse], error)
}

// NewWhatsappServiceClient constructs a client for the whatsapp.v1.WhatsappService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWhatsappServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WhatsappServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &whatsappServiceClient{
		connectWhatsappAccount: connect.NewClient[v1.ConnectWhatsappAccountRequest, v1.ConnectWhatsappAccountResponse](
			httpClient,
			baseURL+WhatsappServiceConnectWhatsappAccountProcedure,
			connect.WithSchema(whatsappServiceConnectWhatsappAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		disconnectWhatsappAccount: connect.NewClient[v1.DisconnectWhatsappAccountRequest, v1.DisconnectWhatsappAccountResponse](
			httpClient,
			baseURL+WhatsappServiceDisconnectWhatsappAccountProcedure,
			connect.WithSchema(whatsappServiceDisconnectWhatsappAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getWhatsappAccount: connect.NewClient[v1.GetWhatsappAccountRequest, v1.GetWhatsappAccountResponse](
			httpClient,
			baseURL+WhatsappServiceGetWhatsappAccountProcedure,
			connect.WithSchema(whatsappServiceGetWhatsappAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// whatsappServiceClient implements WhatsappServiceClient.
type whatsappServiceClient struct {
	connectWhatsappAccount    *connect.Client[v1.ConnectWhatsappAccountRequest, v1.ConnectWhatsappAccountResponse]
	disconnectWhatsappAccount *connect.Client[v1.DisconnectWhatsappAccountRequest, v1.DisconnectWhatsappAccountResponse]
	getWhatsappAccount        *connect.Client[v1.GetWhatsappAccountRequest, v1.GetWhatsappAccountResponse]
}

// ConnectWhatsappAccount calls whatsapp.v1.WhatsappService.ConnectWhatsappAccount.
func (c *whatsappServiceClient) ConnectWhatsappAccount(ctx context.Context, req *connect.Request[v1.ConnectWhatsappAccountRequest]) (*connect.Response[v1.ConnectWhatsappAccountResponse], error) {
	return c.connectWhatsappAccount.CallUnary(ctx, req)
}

// DisconnectWhatsappAccount calls whatsapp.v1.WhatsappService.DisconnectWhatsappAccount.
func (c *whatsappServiceClient) DisconnectWhatsappAccount(ctx context.Context, req *connect.Request[v1.DisconnectWhatsappAccountRequest]) (*connect.Response[v1.DisconnectWhatsappAccountResponse], error) {
	return c.disconnectWhatsappAccount.CallUnary(ctx, req)
}

// GetWhatsappAccount calls whatsapp.v1.WhatsappService.GetWhatsappAccount.
func (c *whatsappServiceClient) GetWhatsappAccount(ctx context.Context, req *connect.Request[v1.GetWhatsappAccountRequest]) (*connect.Response[v1.GetWhatsappAccountResponse], error) {
	return c.getWhatsappAccount.CallUnary(ctx, req)
}

// WhatsappServiceHandler is an implementation of the whatsapp.v1.WhatsappService service.
type WhatsappServiceHandler interface {
	ConnectWhatsappAccount(context.Context, *connect.Request[v1.ConnectWhatsappAccountRequest]) (*connect.Response[v1.ConnectWhatsappAccountResponse], error)
	// possible errors:
	//   - not found
	DisconnectWhatsappAccount(context.Context, *connect.Request[v1.DisconnectWhatsappAccountRequest]) (*connect.Response[v1.DisconnectWhatsappAccountResponse], error)
	// possible errors:
	//   - not found
	GetWhatsappAccount(context.Context, *connect.Request[v1.GetWhatsappAccountRequest]) (*connect.Response[v1.GetWhatsappAccountResponse], error)
}

// NewWhatsappServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWhatsappServiceHandler(svc WhatsappServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	whatsappServiceConnectWhatsappAccountHandler := connect.NewUnaryHandler(
		WhatsappServiceConnectWhatsappAccountProcedure,
		svc.ConnectWhatsappAccount,
		connect.WithSchema(whatsappServiceConnectWhatsappAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	whatsappServiceDisconnectWhatsappAccountHandler := connect.NewUnaryHandler(
		WhatsappServiceDisconnectWhatsappAccountProcedure,
		svc.DisconnectWhatsappAccount,
		connect.WithSchema(whatsappServiceDisconnectWhatsappAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	whatsappServiceGetWhatsappAccountHandler := connect.NewUnaryHandler(
		WhatsappServiceGetWhatsappAccountProcedure,
		svc.GetWhatsappAccount,
		connect.WithSchema(whatsappServiceGetWhatsappAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/whatsapp.v1.WhatsappService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WhatsappServiceConnectWhatsappAccountProcedure:
			whatsappServiceConnectWhatsappAccountHandler.ServeHTTP(w, r)
		case WhatsappServiceDisconnectWhatsappAccountProcedure:
			whatsappServiceDisconnectWhatsappAccountHandler.ServeHTTP(w, r)
		case WhatsappServiceGetWhatsappAccountProcedure:
			whatsappServiceGetWhatsappAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWhatsappServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWhatsappServiceHandler struct{}

func (UnimplementedWhatsappServiceHandler) ConnectWhatsappAccount(context.Context, *connect.Request[v1.ConnectWhatsappAccountRequest]) (*connect.Response[v1.ConnectWhatsappAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("whatsapp.v1.WhatsappService.ConnectWhatsappAccount is not implemented"))
}

func (UnimplementedWhatsappServiceHandler) DisconnectWhatsappAccount(context.Context, *connect.Request[v1.DisconnectWhatsappAccountRequest]) (*connect.Response[v1.DisconnectWhatsappAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("whatsapp.v1.WhatsappService.DisconnectWhatsappAccount is not implemented"))
}

func (UnimplementedWhatsappServiceHandler) GetWhatsappAccount(context.Context, *connect.Request[v1.GetWhatsappAccountRequest]) (*connect.Response[v1.GetWhatsappAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("whatsapp.v1.WhatsappService.GetWhatsappAccount is not implemented"))
}
