// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jadwalapp/symmetrical-spoon/falak/pkg/gen/proto/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceInitiateEmailProcedure is the fully-qualified name of the AuthService's InitiateEmail
	// RPC.
	AuthServiceInitiateEmailProcedure = "/auth.v1.AuthService/InitiateEmail"
	// AuthServiceCompleteEmailProcedure is the fully-qualified name of the AuthService's CompleteEmail
	// RPC.
	AuthServiceCompleteEmailProcedure = "/auth.v1.AuthService/CompleteEmail"
	// AuthServiceUseGoogleProcedure is the fully-qualified name of the AuthService's UseGoogle RPC.
	AuthServiceUseGoogleProcedure = "/auth.v1.AuthService/UseGoogle"
	// AuthServiceGenerateMagicTokenProcedure is the fully-qualified name of the AuthService's
	// GenerateMagicToken RPC.
	AuthServiceGenerateMagicTokenProcedure = "/auth.v1.AuthService/GenerateMagicToken"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor                  = v1.File_auth_v1_auth_proto.Services().ByName("AuthService")
	authServiceInitiateEmailMethodDescriptor      = authServiceServiceDescriptor.Methods().ByName("InitiateEmail")
	authServiceCompleteEmailMethodDescriptor      = authServiceServiceDescriptor.Methods().ByName("CompleteEmail")
	authServiceUseGoogleMethodDescriptor          = authServiceServiceDescriptor.Methods().ByName("UseGoogle")
	authServiceGenerateMagicTokenMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("GenerateMagicToken")
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	InitiateEmail(context.Context, *connect.Request[v1.InitiateEmailRequest]) (*connect.Response[v1.InitiateEmailResponse], error)
	CompleteEmail(context.Context, *connect.Request[v1.CompleteEmailRequest]) (*connect.Response[v1.CompleteEmailResponse], error)
	UseGoogle(context.Context, *connect.Request[v1.UseGoogleRequest]) (*connect.Response[v1.UseGoogleResponse], error)
	GenerateMagicToken(context.Context, *connect.Request[v1.GenerateMagicTokenRequest]) (*connect.Response[v1.GenerateMagicTokenResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		initiateEmail: connect.NewClient[v1.InitiateEmailRequest, v1.InitiateEmailResponse](
			httpClient,
			baseURL+AuthServiceInitiateEmailProcedure,
			connect.WithSchema(authServiceInitiateEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completeEmail: connect.NewClient[v1.CompleteEmailRequest, v1.CompleteEmailResponse](
			httpClient,
			baseURL+AuthServiceCompleteEmailProcedure,
			connect.WithSchema(authServiceCompleteEmailMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		useGoogle: connect.NewClient[v1.UseGoogleRequest, v1.UseGoogleResponse](
			httpClient,
			baseURL+AuthServiceUseGoogleProcedure,
			connect.WithSchema(authServiceUseGoogleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		generateMagicToken: connect.NewClient[v1.GenerateMagicTokenRequest, v1.GenerateMagicTokenResponse](
			httpClient,
			baseURL+AuthServiceGenerateMagicTokenProcedure,
			connect.WithSchema(authServiceGenerateMagicTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	initiateEmail      *connect.Client[v1.InitiateEmailRequest, v1.InitiateEmailResponse]
	completeEmail      *connect.Client[v1.CompleteEmailRequest, v1.CompleteEmailResponse]
	useGoogle          *connect.Client[v1.UseGoogleRequest, v1.UseGoogleResponse]
	generateMagicToken *connect.Client[v1.GenerateMagicTokenRequest, v1.GenerateMagicTokenResponse]
}

// InitiateEmail calls auth.v1.AuthService.InitiateEmail.
func (c *authServiceClient) InitiateEmail(ctx context.Context, req *connect.Request[v1.InitiateEmailRequest]) (*connect.Response[v1.InitiateEmailResponse], error) {
	return c.initiateEmail.CallUnary(ctx, req)
}

// CompleteEmail calls auth.v1.AuthService.CompleteEmail.
func (c *authServiceClient) CompleteEmail(ctx context.Context, req *connect.Request[v1.CompleteEmailRequest]) (*connect.Response[v1.CompleteEmailResponse], error) {
	return c.completeEmail.CallUnary(ctx, req)
}

// UseGoogle calls auth.v1.AuthService.UseGoogle.
func (c *authServiceClient) UseGoogle(ctx context.Context, req *connect.Request[v1.UseGoogleRequest]) (*connect.Response[v1.UseGoogleResponse], error) {
	return c.useGoogle.CallUnary(ctx, req)
}

// GenerateMagicToken calls auth.v1.AuthService.GenerateMagicToken.
func (c *authServiceClient) GenerateMagicToken(ctx context.Context, req *connect.Request[v1.GenerateMagicTokenRequest]) (*connect.Response[v1.GenerateMagicTokenResponse], error) {
	return c.generateMagicToken.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	InitiateEmail(context.Context, *connect.Request[v1.InitiateEmailRequest]) (*connect.Response[v1.InitiateEmailResponse], error)
	CompleteEmail(context.Context, *connect.Request[v1.CompleteEmailRequest]) (*connect.Response[v1.CompleteEmailResponse], error)
	UseGoogle(context.Context, *connect.Request[v1.UseGoogleRequest]) (*connect.Response[v1.UseGoogleResponse], error)
	GenerateMagicToken(context.Context, *connect.Request[v1.GenerateMagicTokenRequest]) (*connect.Response[v1.GenerateMagicTokenResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceInitiateEmailHandler := connect.NewUnaryHandler(
		AuthServiceInitiateEmailProcedure,
		svc.InitiateEmail,
		connect.WithSchema(authServiceInitiateEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompleteEmailHandler := connect.NewUnaryHandler(
		AuthServiceCompleteEmailProcedure,
		svc.CompleteEmail,
		connect.WithSchema(authServiceCompleteEmailMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceUseGoogleHandler := connect.NewUnaryHandler(
		AuthServiceUseGoogleProcedure,
		svc.UseGoogle,
		connect.WithSchema(authServiceUseGoogleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGenerateMagicTokenHandler := connect.NewUnaryHandler(
		AuthServiceGenerateMagicTokenProcedure,
		svc.GenerateMagicToken,
		connect.WithSchema(authServiceGenerateMagicTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceInitiateEmailProcedure:
			authServiceInitiateEmailHandler.ServeHTTP(w, r)
		case AuthServiceCompleteEmailProcedure:
			authServiceCompleteEmailHandler.ServeHTTP(w, r)
		case AuthServiceUseGoogleProcedure:
			authServiceUseGoogleHandler.ServeHTTP(w, r)
		case AuthServiceGenerateMagicTokenProcedure:
			authServiceGenerateMagicTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) InitiateEmail(context.Context, *connect.Request[v1.InitiateEmailRequest]) (*connect.Response[v1.InitiateEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.InitiateEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompleteEmail(context.Context, *connect.Request[v1.CompleteEmailRequest]) (*connect.Response[v1.CompleteEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.CompleteEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) UseGoogle(context.Context, *connect.Request[v1.UseGoogleRequest]) (*connect.Response[v1.UseGoogleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.UseGoogle is not implemented"))
}

func (UnimplementedAuthServiceHandler) GenerateMagicToken(context.Context, *connect.Request[v1.GenerateMagicTokenRequest]) (*connect.Response[v1.GenerateMagicTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.GenerateMagicToken is not implemented"))
}
