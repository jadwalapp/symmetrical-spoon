// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: caldav_account.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCalDAVAccount = `-- name: CreateCalDAVAccount :one
INSERT INTO caldav_account (customer_id, email, username, password)
VALUES ($1, $2, $3, pgp_sym_encrypt($4::text, $5::text))
RETURNING id, customer_id, email, username, password, created_at, updated_at
`

type CreateCalDAVAccountParams struct {
	CustomerID    uuid.UUID
	Email         string
	Username      string
	Password      string
	EncryptionKey string
}

func (q *Queries) CreateCalDAVAccount(ctx context.Context, arg CreateCalDAVAccountParams) (CaldavAccount, error) {
	row := q.db.QueryRowContext(ctx, createCalDAVAccount,
		arg.CustomerID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.EncryptionKey,
	)
	var i CaldavAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCalDAVAccountByCustomerId = `-- name: GetCalDAVAccountByCustomerId :one
SELECT id, customer_id, email, username, password, created_at, updated_at, pgp_sym_decrypt(ca.password, $2::text)
FROM caldav_account ca
WHERE ca.customer_id = $1
`

type GetCalDAVAccountByCustomerIdParams struct {
	CustomerID    uuid.UUID
	EncryptionKey string
}

type GetCalDAVAccountByCustomerIdRow struct {
	ID            uuid.UUID
	CustomerID    uuid.UUID
	Email         string
	Username      string
	Password      string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	PgpSymDecrypt string
}

func (q *Queries) GetCalDAVAccountByCustomerId(ctx context.Context, arg GetCalDAVAccountByCustomerIdParams) (GetCalDAVAccountByCustomerIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCalDAVAccountByCustomerId, arg.CustomerID, arg.EncryptionKey)
	var i GetCalDAVAccountByCustomerIdRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PgpSymDecrypt,
	)
	return i, err
}
