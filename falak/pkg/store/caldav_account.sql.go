// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: caldav_account.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCalDavAccount = `-- name: CreateCalDavAccount :one
INSERT INTO caldav_account (customer_id, email, username, password)
VALUES ($1, $2, $3, pgp_sym_encrypt($4::text, $5::text, 'cipher-algo=aes256'))
RETURNING id, customer_id, email, username, password, created_at, updated_at
`

type CreateCalDavAccountParams struct {
	CustomerID    uuid.UUID
	Email         string
	Username      string
	Password      string
	EncryptionKey string
}

func (q *Queries) CreateCalDavAccount(ctx context.Context, arg CreateCalDavAccountParams) (CaldavAccount, error) {
	row := q.db.QueryRowContext(ctx, createCalDavAccount,
		arg.CustomerID,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.EncryptionKey,
	)
	var i CaldavAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCalDavAccountByCustomerId = `-- name: GetCalDavAccountByCustomerId :one
SELECT id, customer_id, email, username, password, created_at, updated_at, pgp_sym_decrypt(ca.password::bytea, $2::text) AS decrypted_password
FROM caldav_account ca
WHERE ca.customer_id = $1
`

type GetCalDavAccountByCustomerIdParams struct {
	CustomerID    uuid.UUID
	EncryptionKey string
}

type GetCalDavAccountByCustomerIdRow struct {
	ID                uuid.UUID
	CustomerID        uuid.UUID
	Email             string
	Username          string
	Password          string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	DecryptedPassword string
}

func (q *Queries) GetCalDavAccountByCustomerId(ctx context.Context, arg GetCalDavAccountByCustomerIdParams) (GetCalDavAccountByCustomerIdRow, error) {
	row := q.db.QueryRowContext(ctx, getCalDavAccountByCustomerId, arg.CustomerID, arg.EncryptionKey)
	var i GetCalDavAccountByCustomerIdRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DecryptedPassword,
	)
	return i, err
}
