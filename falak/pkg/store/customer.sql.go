// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customer.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerIfNotExists = `-- name: CreateCustomerIfNotExists :one
WITH new_customer AS (
    INSERT INTO customer (name, email)
    SELECT $1, LOWER($2)
    WHERE NOT EXISTS (
        SELECT 1 FROM customer WHERE LOWER(email) = LOWER($2)
    )
    RETURNING id, name, email, created_at, updated_at
)
SELECT id, name, email, created_at, updated_at FROM new_customer
UNION ALL
SELECT id, name, email, created_at, updated_at FROM customer WHERE LOWER(email) = LOWER($2)
LIMIT 1
`

type CreateCustomerIfNotExistsParams struct {
	Name  string
	Email string
}

type CreateCustomerIfNotExistsRow struct {
	ID        uuid.UUID
	Name      string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateCustomerIfNotExists(ctx context.Context, arg CreateCustomerIfNotExistsParams) (CreateCustomerIfNotExistsRow, error) {
	row := q.db.QueryRowContext(ctx, createCustomerIfNotExists, arg.Name, arg.Email)
	var i CreateCustomerIfNotExistsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomerById = `-- name: DeleteCustomerById :exec
DELETE FROM customer WHERE id = $1
`

func (q *Queries) DeleteCustomerById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerById, id)
	return err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, name, email, created_at, updated_at FROM customer WHERE LOWER(email) = LOWER($1)
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, name, email, created_at, updated_at FROM customer WHERE id = $1
`

func (q *Queries) GetCustomerById(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const isCustomerFirstLogin = `-- name: IsCustomerFirstLogin :one
SELECT 
  (
    SELECT COUNT(CASE WHEN used_at IS NULL THEN 1 END) = 
           COUNT(CASE WHEN used_at IS NOT NULL THEN 1 END)
    FROM magic_link ml
    WHERE ml.customer_id = $1
  ) != 
  EXISTS (
    SELECT 1 FROM auth_google ag
    WHERE ag.customer_id = $1
  ) as is_customer_first_login
`

func (q *Queries) IsCustomerFirstLogin(ctx context.Context, customerID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCustomerFirstLogin, customerID)
	var is_customer_first_login bool
	err := row.Scan(&is_customer_first_login)
	return is_customer_first_login, err
}
