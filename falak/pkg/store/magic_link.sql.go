// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: magic_link.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMagicLink = `-- name: CreateMagicLink :one
INSERT INTO magic_link (customer_id, token_hash, expires_at)
VALUES ($1, $2, $3)
RETURNING id, customer_id, token_hash, expires_at, used_at, created_at, updated_at
`

type CreateMagicLinkParams struct {
	CustomerID uuid.UUID
	TokenHash  string
	ExpiresAt  time.Time
}

func (q *Queries) CreateMagicLink(ctx context.Context, arg CreateMagicLinkParams) (MagicLink, error) {
	row := q.db.QueryRowContext(ctx, createMagicLink, arg.CustomerID, arg.TokenHash, arg.ExpiresAt)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnusedMagicLinkByTokenHash = `-- name: GetUnusedMagicLinkByTokenHash :one
SELECT id, customer_id, token_hash, expires_at, used_at, created_at, updated_at FROM magic_link WHERE token_hash = $1 AND used_at IS NULL
`

func (q *Queries) GetUnusedMagicLinkByTokenHash(ctx context.Context, tokenHash string) (MagicLink, error) {
	row := q.db.QueryRowContext(ctx, getUnusedMagicLinkByTokenHash, tokenHash)
	var i MagicLink
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMagicLinkUsedAtByTokenHash = `-- name: UpdateMagicLinkUsedAtByTokenHash :exec
UPDATE magic_link
SET used_at = $2
WHERE token_hash = $1
`

type UpdateMagicLinkUsedAtByTokenHashParams struct {
	TokenHash string
	UsedAt    sql.NullTime
}

func (q *Queries) UpdateMagicLinkUsedAtByTokenHash(ctx context.Context, arg UpdateMagicLinkUsedAtByTokenHashParams) error {
	_, err := q.db.ExecContext(ctx, updateMagicLinkUsedAtByTokenHash, arg.TokenHash, arg.UsedAt)
	return err
}
