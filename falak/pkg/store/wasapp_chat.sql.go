// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wasapp_chat.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addMessageToChatReturningMessages = `-- name: AddMessageToChatReturningMessages :many
WITH new_chat AS (
  INSERT INTO wasapp_chat (customer_id, chat_id)
  VALUES ($1, $2)
  ON CONFLICT (chat_id) DO NOTHING
  RETURNING id, customer_id, chat_id, created_at, updated_at
),
inserted_message AS (
  INSERT INTO wasapp_message (
    wasapp_chat_id,
    message_id,
    sender_name,
    sender_number,
    is_sender_me,
    body,
    timestamp
  )
  SELECT 
    COALESCE((SELECT id FROM new_chat), (SELECT id FROM wasapp_chat WHERE chat_id = $2)),
    $3,
    $4,
    $5,
    $6,
    pgp_sym_encrypt($9::text, $8::text, 'cipher-algo=aes256'),
    $7
  ON CONFLICT (message_id) DO NOTHING
  RETURNING id, wasapp_chat_id, message_id, sender_name, sender_number, is_sender_me, body, timestamp, created_at, updated_at
)
SELECT 
  m.id, m.wasapp_chat_id, m.message_id, m.sender_name, m.sender_number, m.is_sender_me, m.body, m.timestamp, m.created_at, m.updated_at,
  pgp_sym_decrypt(m.body::bytea, $8::text) AS decrypted_body,
  c.chat_id,
  c.customer_id
FROM wasapp_message m
JOIN wasapp_chat c ON c.id = m.wasapp_chat_id
WHERE c.chat_id = $2
`

type AddMessageToChatReturningMessagesParams struct {
	CustomerID    uuid.UUID
	ChatID        string
	MessageID     string
	SenderName    string
	SenderNumber  string
	IsSenderMe    bool
	Timestamp     int64
	EncryptionKey string
	Body          string
}

type AddMessageToChatReturningMessagesRow struct {
	ID            uuid.UUID
	WasappChatID  uuid.UUID
	MessageID     string
	SenderName    string
	SenderNumber  string
	IsSenderMe    bool
	Body          string
	Timestamp     int64
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DecryptedBody string
	ChatID        string
	CustomerID    uuid.UUID
}

func (q *Queries) AddMessageToChatReturningMessages(ctx context.Context, arg AddMessageToChatReturningMessagesParams) ([]AddMessageToChatReturningMessagesRow, error) {
	rows, err := q.db.QueryContext(ctx, addMessageToChatReturningMessages,
		arg.CustomerID,
		arg.ChatID,
		arg.MessageID,
		arg.SenderName,
		arg.SenderNumber,
		arg.IsSenderMe,
		arg.Timestamp,
		arg.EncryptionKey,
		arg.Body,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AddMessageToChatReturningMessagesRow
	for rows.Next() {
		var i AddMessageToChatReturningMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.WasappChatID,
			&i.MessageID,
			&i.SenderName,
			&i.SenderNumber,
			&i.IsSenderMe,
			&i.Body,
			&i.Timestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DecryptedBody,
			&i.ChatID,
			&i.CustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteChat = `-- name: DeleteChat :exec
DELETE FROM wasapp_chat WHERE chat_id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, chatID string) error {
	_, err := q.db.ExecContext(ctx, deleteChat, chatID)
	return err
}
