// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: magic_token.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createMagicToken = `-- name: CreateMagicToken :one
INSERT INTO magic_token (customer_id, token_hash, token_type, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, customer_id, token_hash, expires_at, used_at, created_at, updated_at, token_type
`

type CreateMagicTokenParams struct {
	CustomerID uuid.UUID
	TokenHash  string
	TokenType  MagicTokenType
	ExpiresAt  time.Time
}

func (q *Queries) CreateMagicToken(ctx context.Context, arg CreateMagicTokenParams) (MagicToken, error) {
	row := q.db.QueryRowContext(ctx, createMagicToken,
		arg.CustomerID,
		arg.TokenHash,
		arg.TokenType,
		arg.ExpiresAt,
	)
	var i MagicToken
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenType,
	)
	return i, err
}

const getUnusedMagicTokenByTokenHash = `-- name: GetUnusedMagicTokenByTokenHash :one
SELECT id, customer_id, token_hash, expires_at, used_at, created_at, updated_at, token_type FROM magic_token WHERE token_hash = $1 AND token_type = $2 AND used_at IS NULL
`

type GetUnusedMagicTokenByTokenHashParams struct {
	TokenHash string
	TokenType MagicTokenType
}

func (q *Queries) GetUnusedMagicTokenByTokenHash(ctx context.Context, arg GetUnusedMagicTokenByTokenHashParams) (MagicToken, error) {
	row := q.db.QueryRowContext(ctx, getUnusedMagicTokenByTokenHash, arg.TokenHash, arg.TokenType)
	var i MagicToken
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.UsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TokenType,
	)
	return i, err
}

const updateMagicTokenUsedAtByTokenHash = `-- name: UpdateMagicTokenUsedAtByTokenHash :exec
UPDATE magic_token
SET used_at = $2
WHERE token_hash = $1
`

type UpdateMagicTokenUsedAtByTokenHashParams struct {
	TokenHash string
	UsedAt    sql.NullTime
}

func (q *Queries) UpdateMagicTokenUsedAtByTokenHash(ctx context.Context, arg UpdateMagicTokenUsedAtByTokenHashParams) error {
	_, err := q.db.ExecContext(ctx, updateMagicTokenUsedAtByTokenHash, arg.TokenHash, arg.UsedAt)
	return err
}
