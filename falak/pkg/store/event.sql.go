// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createEventUnderCalendarByUid = `-- name: CreateEventUnderCalendarByUid :one
INSERT INTO vevent
(uid, calendar_uid, dtstamp, dtstart, dtend, summary, description, location, status, classification, transp)
VALUES (CONCAT(uuid_generate_v4(), '@event.jadwal.app'), $1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING uid, calendar_uid, dtstamp, dtstart, dtend, duration, summary, description, location, status, classification, transp, rrule, rdate, exdate, sequence, created_at, updated_at
`

type CreateEventUnderCalendarByUidParams struct {
	CalendarUid    string
	Dtstamp        time.Time
	Dtstart        time.Time
	Dtend          sql.NullTime
	Summary        string
	Description    sql.NullString
	Location       sql.NullString
	Status         NullEventStatus
	Classification NullEventClassification
	Transp         NullTransparency
}

func (q *Queries) CreateEventUnderCalendarByUid(ctx context.Context, arg CreateEventUnderCalendarByUidParams) (Vevent, error) {
	row := q.db.QueryRowContext(ctx, createEventUnderCalendarByUid,
		arg.CalendarUid,
		arg.Dtstamp,
		arg.Dtstart,
		arg.Dtend,
		arg.Summary,
		arg.Description,
		arg.Location,
		arg.Status,
		arg.Classification,
		arg.Transp,
	)
	var i Vevent
	err := row.Scan(
		&i.Uid,
		&i.CalendarUid,
		&i.Dtstamp,
		&i.Dtstart,
		&i.Dtend,
		&i.Duration,
		&i.Summary,
		&i.Description,
		&i.Location,
		&i.Status,
		&i.Classification,
		&i.Transp,
		&i.Rrule,
		&i.Rdate,
		&i.Exdate,
		&i.Sequence,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
