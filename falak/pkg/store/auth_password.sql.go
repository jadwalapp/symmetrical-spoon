// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth_password.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createAuthPassword = `-- name: CreateAuthPassword :one
INSERT INTO auth_password (customer_id, password)
VALUES ($1, $2)
RETURNING id, customer_id, password, created_at, updated_at
`

type CreateAuthPasswordParams struct {
	CustomerID uuid.UUID
	Password   string
}

func (q *Queries) CreateAuthPassword(ctx context.Context, arg CreateAuthPasswordParams) (AuthPassword, error) {
	row := q.db.QueryRowContext(ctx, createAuthPassword, arg.CustomerID, arg.Password)
	var i AuthPassword
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthPasswordByUserID = `-- name: GetAuthPasswordByUserID :one
SELECT id, customer_id, password, created_at, updated_at FROM auth_password WHERE customer_id = $1
`

func (q *Queries) GetAuthPasswordByUserID(ctx context.Context, customerID uuid.UUID) (AuthPassword, error) {
	row := q.db.QueryRowContext(ctx, getAuthPasswordByUserID, customerID)
	var i AuthPassword
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAuthPasswordByUSerID = `-- name: UpdateAuthPasswordByUSerID :exec
UPDATE auth_password SET password = $2 WHERE customer_id = $1
`

type UpdateAuthPasswordByUSerIDParams struct {
	CustomerID uuid.UUID
	Password   string
}

func (q *Queries) UpdateAuthPasswordByUSerID(ctx context.Context, arg UpdateAuthPasswordByUSerIDParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthPasswordByUSerID, arg.CustomerID, arg.Password)
	return err
}
