// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: calendar.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCalendarUnderCalendarAccountById = `-- name: CreateCalendarUnderCalendarAccountById :one
INSERT INTO vcalendar
(uid, account_id, prodid, display_name, description, color)
VALUES (CONCAT(uuid_generate_v4(), '@cal.jadwal.app'), $1, $2, $3, $4, $5)
RETURNING uid, account_id, prodid, version, calscale, display_name, description, color, timezone, sequence, created_at, updated_at
`

type CreateCalendarUnderCalendarAccountByIdParams struct {
	AccountID   uuid.UUID
	Prodid      string
	DisplayName string
	Description sql.NullString
	Color       string
}

func (q *Queries) CreateCalendarUnderCalendarAccountById(ctx context.Context, arg CreateCalendarUnderCalendarAccountByIdParams) (Vcalendar, error) {
	row := q.db.QueryRowContext(ctx, createCalendarUnderCalendarAccountById,
		arg.AccountID,
		arg.Prodid,
		arg.DisplayName,
		arg.Description,
		arg.Color,
	)
	var i Vcalendar
	err := row.Scan(
		&i.Uid,
		&i.AccountID,
		&i.Prodid,
		&i.Version,
		&i.Calscale,
		&i.DisplayName,
		&i.Description,
		&i.Color,
		&i.Timezone,
		&i.Sequence,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const doesCustomerOwnCalendar = `-- name: DoesCustomerOwnCalendar :one
SELECT (
    EXISTS(
        SELECT 1 FROM vcalendar v
        JOIN calendar_accounts ca ON v.uid = $2
        WHERE ca.customer_id = $1
      													
    )
) AS does_customer_own_calendar
`

type DoesCustomerOwnCalendarParams struct {
	CustomerID uuid.UUID
	Uid        string
}

func (q *Queries) DoesCustomerOwnCalendar(ctx context.Context, arg DoesCustomerOwnCalendarParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, doesCustomerOwnCalendar, arg.CustomerID, arg.Uid)
	var does_customer_own_calendar bool
	err := row.Scan(&does_customer_own_calendar)
	return does_customer_own_calendar, err
}

const getCalendarsByCustomerId = `-- name: GetCalendarsByCustomerId :many
SELECT id, customer_id, provider, ca.created_at, ca.updated_at, uid, account_id, prodid, version, calscale, display_name, description, color, timezone, sequence, v.created_at, v.updated_at
FROM calendar_accounts ca
JOIN vcalendar v ON ca.id = v.account_id
WHERE ca.customer_id = $1
`

type GetCalendarsByCustomerIdRow struct {
	ID          uuid.UUID
	CustomerID  uuid.UUID
	Provider    ProviderType
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Uid         string
	AccountID   uuid.UUID
	Prodid      string
	Version     string
	Calscale    sql.NullString
	DisplayName string
	Description sql.NullString
	Color       string
	Timezone    sql.NullString
	Sequence    sql.NullInt32
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetCalendarsByCustomerId(ctx context.Context, customerID uuid.UUID) ([]GetCalendarsByCustomerIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarsByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCalendarsByCustomerIdRow
	for rows.Next() {
		var i GetCalendarsByCustomerIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Provider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Uid,
			&i.AccountID,
			&i.Prodid,
			&i.Version,
			&i.Calscale,
			&i.DisplayName,
			&i.Description,
			&i.Color,
			&i.Timezone,
			&i.Sequence,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCalendarsByCustomerIdAndAccountId = `-- name: GetCalendarsByCustomerIdAndAccountId :many
SELECT id, customer_id, provider, ca.created_at, ca.updated_at, uid, account_id, prodid, version, calscale, display_name, description, color, timezone, sequence, v.created_at, v.updated_at
FROM calendar_accounts ca
JOIN vcalendar v ON ca.id = v.account_id
WHERE ca.customer_id = $1 AND v.account_id = $2
`

type GetCalendarsByCustomerIdAndAccountIdParams struct {
	CustomerID uuid.UUID
	AccountID  uuid.UUID
}

type GetCalendarsByCustomerIdAndAccountIdRow struct {
	ID          uuid.UUID
	CustomerID  uuid.UUID
	Provider    ProviderType
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Uid         string
	AccountID   uuid.UUID
	Prodid      string
	Version     string
	Calscale    sql.NullString
	DisplayName string
	Description sql.NullString
	Color       string
	Timezone    sql.NullString
	Sequence    sql.NullInt32
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
}

func (q *Queries) GetCalendarsByCustomerIdAndAccountId(ctx context.Context, arg GetCalendarsByCustomerIdAndAccountIdParams) ([]GetCalendarsByCustomerIdAndAccountIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarsByCustomerIdAndAccountId, arg.CustomerID, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCalendarsByCustomerIdAndAccountIdRow
	for rows.Next() {
		var i GetCalendarsByCustomerIdAndAccountIdRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Provider,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Uid,
			&i.AccountID,
			&i.Prodid,
			&i.Version,
			&i.Calscale,
			&i.DisplayName,
			&i.Description,
			&i.Color,
			&i.Timezone,
			&i.Sequence,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
