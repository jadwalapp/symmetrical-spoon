// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth_google.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createAuthGoogle = `-- name: CreateAuthGoogle :one
INSERT INTO auth_google (customer_id, sub)
VALUES ($1, $2)
RETURNING id, customer_id, sub, created_at, updated_at
`

type CreateAuthGoogleParams struct {
	CustomerID uuid.UUID
	Sub        string
}

func (q *Queries) CreateAuthGoogle(ctx context.Context, arg CreateAuthGoogleParams) (AuthGoogle, error) {
	row := q.db.QueryRowContext(ctx, createAuthGoogle, arg.CustomerID, arg.Sub)
	var i AuthGoogle
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthGoogleByCustomerId = `-- name: GetAuthGoogleByCustomerId :one
SELECT id, customer_id, sub, created_at, updated_at FROM auth_google WHERE customer_id = $1
`

func (q *Queries) GetAuthGoogleByCustomerId(ctx context.Context, customerID uuid.UUID) (AuthGoogle, error) {
	row := q.db.QueryRowContext(ctx, getAuthGoogleByCustomerId, customerID)
	var i AuthGoogle
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAuthGoogleBySub = `-- name: GetAuthGoogleBySub :one
SELECT id, customer_id, sub, created_at, updated_at FROM auth_google WHERE sub = $1
`

func (q *Queries) GetAuthGoogleBySub(ctx context.Context, sub string) (AuthGoogle, error) {
	row := q.db.QueryRowContext(ctx, getAuthGoogleBySub, sub)
	var i AuthGoogle
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Sub,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
