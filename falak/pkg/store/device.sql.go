// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: device.sql

package store

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createDeviceIfNotExists = `-- name: CreateDeviceIfNotExists :exec
INSERT INTO device (customer_id, apns_token)
VALUES ($1, $2)
ON CONFLICT (apns_token) DO NOTHING
`

type CreateDeviceIfNotExistsParams struct {
	CustomerID uuid.UUID
	ApnsToken  string
}

func (q *Queries) CreateDeviceIfNotExists(ctx context.Context, arg CreateDeviceIfNotExistsParams) error {
	_, err := q.db.ExecContext(ctx, createDeviceIfNotExists, arg.CustomerID, arg.ApnsToken)
	return err
}

const deleteDevices = `-- name: DeleteDevices :exec
DELETE FROM device
WHERE id IN ($1::string[])
`

func (q *Queries) DeleteDevices(ctx context.Context, dollar_1 []string) error {
	_, err := q.db.ExecContext(ctx, deleteDevices, pq.Array(dollar_1))
	return err
}

const listDeviceByCustomerId = `-- name: ListDeviceByCustomerId :many
SELECT id, customer_id, apns_token, created_at, updated_at
FROM device
WHERE customer_id = $1
`

func (q *Queries) ListDeviceByCustomerId(ctx context.Context, customerID uuid.UUID) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, listDeviceByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.ApnsToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
