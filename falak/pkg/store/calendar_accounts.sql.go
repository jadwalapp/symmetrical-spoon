// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: calendar_accounts.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const createCalendarAccount = `-- name: CreateCalendarAccount :one
INSERT INTO calendar_accounts
(customer_id, provider)
VALUES ($1, $2)
RETURNING id, customer_id, provider, created_at, updated_at
`

type CreateCalendarAccountParams struct {
	CustomerID uuid.UUID
	Provider   ProviderType
}

func (q *Queries) CreateCalendarAccount(ctx context.Context, arg CreateCalendarAccountParams) (CalendarAccount, error) {
	row := q.db.QueryRowContext(ctx, createCalendarAccount, arg.CustomerID, arg.Provider)
	var i CalendarAccount
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Provider,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const doesCustomerOwnCalendarAccount = `-- name: DoesCustomerOwnCalendarAccount :one
SELECT (
    EXISTS(
        SELECT 1 FROM calendar_accounts ca
        WHERE ca.customer_id = $1 AND ca.id = $2
    )
) AS does_customer_own_calendar_account
`

type DoesCustomerOwnCalendarAccountParams struct {
	CustomerID uuid.UUID
	ID         uuid.UUID
}

func (q *Queries) DoesCustomerOwnCalendarAccount(ctx context.Context, arg DoesCustomerOwnCalendarAccountParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, doesCustomerOwnCalendarAccount, arg.CustomerID, arg.ID)
	var does_customer_own_calendar_account bool
	err := row.Scan(&does_customer_own_calendar_account)
	return does_customer_own_calendar_account, err
}

const getCalendarAccountsByCustomerId = `-- name: GetCalendarAccountsByCustomerId :many
SELECT id, customer_id, provider, created_at, updated_at
FROM calendar_accounts ca
WHERE ca.customer_id = $1
`

func (q *Queries) GetCalendarAccountsByCustomerId(ctx context.Context, customerID uuid.UUID) ([]CalendarAccount, error) {
	rows, err := q.db.QueryContext(ctx, getCalendarAccountsByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CalendarAccount
	for rows.Next() {
		var i CalendarAccount
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Provider,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
