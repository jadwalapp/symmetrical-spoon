@startuml Continue with Email
actor User
participant Backend
database Database
participant EmailServer

activate User

User -> Backend ++ : InitiateEmail

Backend -> Database ++ : CreateCustomerIfNotExists
note right of Database : Customer record is always returned.\nIf custoemr doesn't exist, customer\nis created first then returned.
Database --> Backend -- : Customer

Backend -> Backend : Generate Magic Token and its Hash

Backend -> Database ++ : CreateMagicLink(hashed magic token)
Database --> Backend -- : MagicLink

Backend -> EmailServer ++ : SendMagicLink(normal)
EmailServer --> Backend -- : Email Sent Response

Backend --> User -- : Email Sent Response

User -> User : Opens Email And Clicks Magic Link

User -> Backend : CompleteEmail(MagicToken)

Backend -> Backend : Hash MagicToken

Backend -> Database : Get Magic Link by HashedToken
alt MagicLink exists
    Backend -> Backend : Check (Hashed MagicToken == Hashed MagicToken from Database)
    alt Auth Success
        Backend -> Backend : Issue JWT
        Backend --> User : JWT (Access Token)
    else Auth Failure
        Backend --> User : Permission Denied
    end
else MagicLink doesn't exist
    Database --> Backend : ErrNoSqlRowsFound
    Backend --> User : PermissionDenied
end

deactivate User
@enduml

@startuml Continue with Google
actor User
participant GoogleAuth
participant Backend
database Database

activate User

User -> GoogleAuth ++ : GetAccessToken
GoogleAuth --> User : AccessToken

User -> Backend ++ : UseGoogle(AccessToken)
Backend -> GoogleAuth : GetUserInfoByToken
alt Token Valid
    GoogleAuth --> Backend -- : UserInfo
    
    Backend -> Database ++ : CreateCustomerIfNotExist
    Database --> Backend : Customer

    Backend -> Database : CreateAuthGoogleIfNotExist(UserInfo.sid)
    note right of Database : Customer record is always returned.\nIf custoemr doesn't exist, customer\nis created first then returned.
    Database --> Backend  -- : AuthGoogle

    Backend -> Backend : Check AuthGoogle.sid == UserInfo.sid
    alt Auth Success
        Backend -> Backend : Issue JWT
        Backend --> User : JWT (Access Token)
    else Auth Failure
        Backend --> User : Permission Denied
    end
else Token Invalid
    GoogleAuth --> Backend : GetUserInfoByToken Error
    Backend --> User -- : Permission Denied
end

@enduml

@startuml Send Welcome Email
actor System
participant EmailServer
database Database

activate System

System -> Database ++ : FetchUserInfo

Database --> System -- : UserData

System -> System : Get Magic Link Template
System -> System : Fill Magic Link Template by UserData

System -> EmailServer ++ : SendEmail(Filled Magic Link Template)
EmailServer --> System -- : EmailSentResponse

@enduml

@startuml Logout
actor User

activate User

User -> User : Delete JWT from device

@enduml

@startuml Connect Calendar
actor User
participant Backend
participant CalDAV
database Database

activate User

User -> Backend ++ : ConnectCalDAVCalendar

Backend -> CalDAV ++ : AuthenticateCredentials
CalDAV --> Backend -- : AuthResponse

Backend -> Database ++ : StoreCalendarConnection
Database --> Backend : ConnectionStored

Backend -> CalDAV ++ : SyncCalendarData
CalDAV --> Backend -- : SyncedData

Backend -> Database : Store Calendar Data
Database --> Backend -- :  Database Response

Backend --> User -- : ConnectCalDAVCalendar Response
deactivate User
@enduml

@startuml Create Calendar
actor User
participant Backend
database Database

activate User

User -> Backend ++ : CreateCalendarRequest

Backend -> Database ++ : StoreCalendarInfo
Database --> Backend -- : CalendarCreated

Backend --> User -- : CalendarResponse

deactivate User
@enduml

@startuml Connect WhatsApp
actor User
participant Backend
participant WhatsApp
database Database

activate User

User -> Backend ++ : InitiateWhatsApp(phone number)

Backend -> WhatsApp ++ : RequestLinkingCode
alt RequestLinkingCode Success
    WhatsApp --> Backend : RequestLinkingCode Succeeded
    Backend -> User -- : InitiateWhatsApp Succeeded

    User -> User : Get Linking Code from WhatsApp

    User -> Backend ++ : CompleteWhatsApp(Linking Code)
    Backend -> WhatsApp : SendLinkingCode
    alt SendLinkingCode Success
        WhatsApp --> Backend : SendLinkingCode Succeeded
        Backend -> Database ++ : Store WhatsAppAuthCreds for Future Use
        Database --> Backend -- : Stored WhatsAppAuthCreds Successfully
        Backend --> User : CompleteWhatsApp Succeeded
    else SendLinkingCode Failure
        WhatsApp --> Backend : SendLinkingCode Failed
        Backend --> User : CompleteWhatsApp Failed
    end
else RequestLinkingCode Failure
    WhatsApp --> Backend -- : RequestLinkingCode Failed
    Backend --> User -- : InitiateWhatsApp Failed
end

deactivate User
@enduml

@startuml Extract Events from WhatsApp
actor "WhatsApp Service\n(uses whatsapp-web.js)" as WhatsApp
participant Backend
participant "LLM Service" as LLM
database Database
participant "Apple Push Notification service (APNs)" as APN

activate WhatsApp
loop Listen for Messages
    note over WhatsApp: Client receives\nnew message and waits\n30 seconds for context

    WhatsApp -> WhatsApp: Get last 15 messages\nfrom chat context
    
    WhatsApp ->> Backend ++: Send messages context\nfor analysis

    Backend -> LLM ++: Send context with engineered prompt\nfor event extraction
    note right of LLM: Prompt designed to:\n- Identify events\n- Extract date, time, location\n- Handle informal language\n- Return structured JSON
    
    alt Event Found
        LLM --> Backend: Return Event JSON
        
        Backend -> Backend: Validate extracted\nevent information
        
        Backend -> Database ++: Store Event
        Database --> Backend: Confirm Storage

        Backend -> Database: Get Device IDs of Event Owner
        Database --> Backend --: Return Device IDs
        
        Backend -> APN ++: Send "New Event Added" notification
        APN --> Backend --: Notification Result
        
    else No Event Detected
        LLM --> Backend --: No Event Found
        deactivate Backend
        note over WhatsApp: Continue monitoring\nmessages
    end
end

@enduml

@startuml Suggest Conflict Resolutions
actor System
database Database
participant "Apple Push Notification service (APNs)" as APN

activate System

System -> Database ++ : Check If Conflicts Exist Between Events
note right
  Checks for:
  1. Time overlap between events
  2. Available alternative time slots
end note
Database --> System : ConflictedEvents Result

alt ConflictedEvents are not empty
    System -> Database : GetResolutionOptions(ConflictedEvents)
    note right
      Options are:
      1. Move event to another time slot
      2. Keep both with conflict warning
    end note
    Database --> System : ResolutionOptions Result

    System -> Database : Ask For Device IDs Of Customer Owning Event
    Database --> System -- : Device IDs of Customer Owning Event

    System -> APN ++ : Send Push Notification "Telling User There is Conflict" to Device IDs
    note right: Includes both resolution options
    APN --> System -- : Push Notification Sending Result

else ConflictedEvents are empty
    note over System, Database : Do Nothing
end

@enduml

@startuml Manage Scheduling Conflicts
actor User
participant Backend
database Database
participant "Apple Push Notification service (APNs)" as APN

activate User

User -> Backend ++ : ViewConflicts

Backend -> Database ++ : FetchConflicts
Database --> Backend -- : ConflictsList

Backend -> Backend : GenerateResolutionOptions
Backend --> User -- : DisplayConflictsWithOptions

alt User Selects Resolution
    User -> Backend ++ : ResolveConflict(selectedOption)
    
    Backend -> Database ++ : UpdateEvents
    Database --> Backend -- : EventsUpdated
    
    Backend -> Database ++ : Ask For Device IDs Of Customer Owning Event
    Database --> Backend -- : Device IDs of Customer Owning Event
    
    Backend -> APN ++ : Send Push Notification "Conflict Resolved" to Device IDs
    APN --> Backend -- : Push Notification Sending Result
    
    Backend --> User : ConflictResolved
else User Rejects
    note over User, Backend : Do Nothing
end

deactivate User

@enduml

@startuml Add Event Manually
actor User
participant Backend
database Database
participant "Apple Push Notification service (APNs)" as APN

activate User

User -> Backend ++ : CreateEvent(eventDetails)

Backend -> Backend : ValidateEventDetails
alt Validation Success
    Backend -> Database ++ : StoreEvent
    Database --> Backend -- : EventStored
    
    Backend -> Backend : CheckForConflicts
    opt Conflicts Found
        Backend -> Database ++ : Ask For Device IDs Of Customer Owning Event
        Database --> Backend -- : Device IDs of Customer Owning Event
        
        Backend -> APN ++ : Send Push Notification "New Conflict Detected" to Device IDs
        APN --> Backend -- : Push Notification Sending Result
    end
    
    Backend --> User : EventCreated
else Validation Failed
    Backend --> User : ValidationError
end

deactivate User

@enduml

@startuml View Integrated Calendar
actor User
participant Backend
database Database

activate User

User -> Backend ++ : ViewIntegratedCalendar

Backend -> Database ++ : FetchAllCalendars
Database --> Backend -- : IntegratedCalendars

Backend -> Database ++ : FetchAllEvents
Database --> Backend -- : AllEvents

Backend -> Backend : MergeAndSortEvents
Backend --> User -- : DisplayIntegratedCalendar

deactivate User

@enduml

@startuml Schedule Prayer Times
actor User
participant Backend
participant "Prayer Times API" as PrayerTimesAPI
database Database

activate User
User -> Backend ++ : EnablePrayerTimeScheduling

Backend -> PrayerTimesAPI ++ : Fetch Prayer Times by User's Timezone
PrayerTimesAPI --> Backend -- : PrayerTimes

Backend -> Database ++ : Create Events to Block Times of Prayer
Database --> Backend -- : Creation Response

Backend --> User : EnablePrayerTimeScheduling Response

@enduml

@startuml Receive Event Notifications
actor System
database Database
participant "Apple Push Notification service (APNs)" as APN

activate System

loop Poll Every One Minute
    System -> Database ++ : Check Alarms Set for Events
    Database --> System : Return Active Alarms
    alt Active Alarms Found
        System -> Database : Ask For Device IDs Of Customer Owning Event
        Database --> System -- : Device IDs of Customer Owning Event
        
        loop For Every Event
            System -> APN ++  : Send Push Notification to Device IDs
            APN --> System -- : Push Notification Sending Result
        end
    else No Active Alarms
        note over System,Database : Continue Polling
    end
end

@enduml