%% use this to compile it:
%% mmdc -i docs/diagrams/architecture.mmd -o ./docs/gp1/images/architecture.png -w 900
graph TB
    subgraph "Frontend (Mishkat)"
        A[iOS SwiftUI App]
    end

    subgraph "Backend (Falak)"
        B[ConnectRPC Server]
        C[Auth Service]
        D[Calendar Service]
        E[CalDAV Client]
        I[WhatsApp Event Consumer]
        M[Calendar Task Producer/Consumer]
    end

    subgraph "Wasapp (WhatsApp) Service"
        F[Bun HTTP RESTful Server]
        G[WhatsApp Web.js Client]
        J[WhatsApp Event Producer]
    end

    subgraph "RabbitMQ"
        K_WA[(WhatsApp Event Queue)]
        K_CAL[(Calendar Task Queue)]
    end

    subgraph "Database"
        H[(PostgreSQL)]
    end

    subgraph "Calendar Server"
        BAIKAL[Baikal CalDAV Server]
    end

    %% Frontend -> Backend
    A --"ConnectRPC"--> B

    B --> C
    B --> D
    D --> E
    E --"CalDAV Protocol"--> BAIKAL
    B --"HTTP/REST"--> F

    F --> G
    G --> J
    J --"Publish WhatsApp Events"--> K_WA

    K_WA --"Consume WhatsApp Events"--> I
    I --> D

    D --"Publish Calendar Tasks"--> K_CAL
    K_CAL --"Consume Calendar Tasks"--> M
    M --> D

    C --> H
    D --> H

    classDef frontend fill:#f9f,stroke:#333,stroke-width:2px;
    classDef backend fill:#bbf,stroke:#333,stroke-width:2px;
    classDef whatsapp fill:#bfb,stroke:#333,stroke-width:2px;
    classDef database fill:#fbb,stroke:#333,stroke-width:2px;
    classDef queue fill:#ff9,stroke:#333,stroke-width:2px;
    classDef calendar fill:#fdb,stroke:#333,stroke-width:2px;

    class A frontend;
    class B,C,D,E,I,M backend;
    class F,G,J whatsapp;
    class H database;
    class K_WA,K_CAL queue;
    class BAIKAL calendar;
